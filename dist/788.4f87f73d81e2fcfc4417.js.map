{"version":3,"file":"788.4f87f73d81e2fcfc4417.js","mappings":"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","sources":["./src/app/pages/auth/pages/login/login-routing.module.ts","./src/app/pages/auth/pages/login/login.component.ts","./src/app/pages/auth/pages/login/login.component.html","./src/app/pages/auth/pages/login/login.module.ts","./src/app/shared/utils/data.ts","./src/app/shared/utils/form.ts","./src/app/shared/utils/index.ts","./src/app/shared/utils/regex.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { regexErrors, regex, markFormGroupTouched } from '@app/shared/utils';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as fromRoot from '@app/store';\nimport * as fromUser from '@app/store/user';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoginComponent implements OnInit {\n  form !: FormGroup;\n  regexErrors = regexErrors;\n  loading$ !: Observable<boolean | null>;\n\n  constructor(\n    private fb: FormBuilder,\n    private store: Store<fromRoot.State>\n  ) { }\n\n  ngOnInit(): void {\n    this.loading$ = this.store.pipe(select(fromUser.getLoading));\n\n    this.form = this.fb.group({\n      email: [null, {\n        updateOn: 'blur', validators: [\n          Validators.required,\n          Validators.maxLength(128),\n          Validators.pattern(regex.email)\n        ]\n      }],\n\n\n      password: [null, {\n        updateOn: 'blur', validators: [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.maxLength(30),\n          Validators.pattern(regex.password)\n        ]\n      }],\n    })\n\n\n  }\n\n\n\n\n  onSubmit(): void {\n\n    if (this.form.valid) {\n      const value = this.form.value;\n\n      const userLoginRequest: fromUser.EmailPasswordCredentials = {\n        email: value.email,\n        password: value.password,\n      }\n\n      this.store.dispatch(new fromUser.SignInEmail(userLoginRequest));\n\n    } else {\n      markFormGroupTouched(this.form);\n    }\n\n\n  }\n\n\n}\n","<div class=\"app-page\">\n  <div class=\"app-page__header\">\n    <h1>Login</h1>\n  </div>\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" (keyup.enter)=\"onSubmit()\" novalidate autocomplete=\"off\">\n    <div class=\"app-page__content\">\n      <app-form-field label=\"E-Mail\" [required]=\"true\" [control]=\"form.controls.email\" [isInline]=\"false\"\n        [patternError]=\"regexErrors.email\">\n        <app-input formControlName=\"email\"></app-input>\n      </app-form-field>\n\n      <app-form-field label=\"Password\" [required]=\"true\" [control]=\"form.controls.password\" [isInline]=\"false\"\n        [patternError]=\"regexErrors.password\">\n        <app-password formControlName=\"password\"></app-password>\n      </app-form-field>\n\n    </div>\n    <div class=\"app-page__footer\">\n      <app-button type=\"submit\">Enviar</app-button>\n    </div>\n  </form>\n  <app-spinner *ngIf=\"loading$ | async\"></app-spinner>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login.component';\n\n\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormFieldModule, InputModule, PasswordModule } from '@app/shared/controls';\nimport { ButtonModule } from '@app/shared/buttons';\nimport { SpinnerModule } from '@app/shared/indicators';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent\n  ],\n  imports: [\n    CommonModule,\n    LoginRoutingModule,\n    RouterModule,\n    ReactiveFormsModule,\n    FormFieldModule,\n    InputModule,\n    PasswordModule,\n    ButtonModule,\n    SpinnerModule\n  ]\n})\nexport class LoginModule { }\n","import { DocumentChangeAction } from \"@angular/fire/compat/firestore\";\n\ninterface Item {\n    id? : string;\n    [key: string] : any;\n}\n\nexport const extractDocumentChangeActionData = (x: DocumentChangeAction<any>, addId =true ): Item | any => {\n    const data = x.payload.doc.data();\n\n    if(addId){\n        data.id = x.payload.doc.id;\n    }\n\n    return data;\n}\n","import  {ControlItem} from '@app/models/frontend';\n\nexport const markFormGroupTouched = (formGroup: any) => {\n  (Object as any).values(formGroup.controls).forEach((control: any) => {\n      control.markAsTouched();\n\n      if(control.controls){\n        markFormGroupTouched(control);\n      }\n\n  })\n}\n\nexport interface Control {\n  items? : ControlItem[];\n  changed? : () => void;\n  map?: (() => void) | any;\n}\n\nexport interface ControlEntities {\n  [key: string] : Control;\n}\n\nexport const  mapControls = (controls: ControlEntities) : void => {\n  Object.keys(controls).forEach( (key:string) => {\n    if(controls[key].map){\n      controls[key].map();\n    }\n  })\n}","export * from './regex';\nexport * from './form';\nexport * from './data';\n","/* tslint:disable:max-line-length */\nexport const regex = {\n\temail: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n\tpassword: /^(?:(?=.*[a-z])(?:(?=.*[A-Z])(?=.*[\\d\\W])|(?=.*\\W)(?=.*\\d))|(?=.*\\W)(?=.*[A-Z])(?=.*\\d)).{8,}$/,\n\tnumber: /^\\d+$/,\n};\n\nexport const regexErrors = {\n\temail: 'El email es incorrecto',\n\tpassword: 'El password debe contener una letra mayuscula, minuscula, un numero y un caracter especial',\n\tnumber: 'Solo puede ingresar numeros'\n}\n"],"names":[],"sourceRoot":"webpack:///"}